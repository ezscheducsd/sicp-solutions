#lang racket

; consider the bank account procedure of 3.1.1:

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else
           (error "Unknown request: MAKE-ACCOUNT"
                  m))))
  dispatch)

; show the environment structure generated by
(define acc (make-account 50))

((acc 'deposit) 50)
; 90

((acc 'withdraw) 60)
; 30

; Where is the local state for acc kept?
; Suppose we define another account
(define acc2 (make-account 100))
; how are local states for two accounts kept distinct?
; Which parts of the environment structure are shared b/t acc and acc2?

; local states for two accounts are kept in an
; environment that points back to the global environment
; which contains the "balance" binding

; The only parts shared by acc and acc2 are the global environment.
; Each account has its own bindings (in its local frame) for
; withdraw, deposit, and dispatch
; So there would be 6 objects in total for withdraw, deposit and dispatch
; , with 3 for each account.