Exercise 1.20: e process that a procedure generates is
of course dependent on the rules used by the interpreter.
As an example, consider the iterative gcd procedure given
above. Suppose we were to interpret this procedure using
normal-order evaluation, as discussed in Section 1.1.5. (e
normal-order-evaluation rule for if is described in Exercise
1.5.) Using the substitution method (for normal order), illus-
trate the process generated in evaluating (gcd 206 40) and
indicate the remainder operations that are actually per-
formed. How many remainder operations are actually per-
formed in the normal-order evaluation of (gcd 206 40) ?
In the applicative-order evaluation?


Normal order evaluation: 
remainder count: 18
(gcd 206 40)
(gcd 40 (remainder 206 40))
evaluate (remainder 206 40) to get 6
(gcd (remainder 206 40) (remainder 40 (remainder 206 40)))
evaluate (remainder 40 (remainder 206 40)) to get 4
(gcd 
    (remainder 40 (remainder 206 40))
    (remainder ((remainder 206 40)) ((remainder 40 (remainder 206 40))))
    )
evaluate b to get 2

(gcd 
    (remainder ((remainder 206 40)) ((remainder 40 (remainder 206 40))))
    (remainder ((remainder 40 (remainder 206 40))) ((remainder ((remainder 206 40)) ((remainder 40 (remainder 206 40))))) )
    )
evaluate b to get 0.

now we return a. 4 more calls.


Applicative order evaluation.
remainder counter: 4
(gcd 206 40)
(gcd 40 (remainder 206 40))

evaluate b before application to get 6.

(gcd 40 6)
(gcd 6 (remainder 40 6))

evaluate b before application to get 4
(gcd 6 4)
(gcd 4 (remainder 6 4))

evaluate b before application to get 2

(gcd 4 2)
(gcd 2 (remainder 4 2))

evaluate b before application to get 0

(gcd 2 0)

return 2.